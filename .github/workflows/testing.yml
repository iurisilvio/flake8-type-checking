name: test

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11.0"
      - uses: actions/cache@v3
        id: cache-venv
        with:
          path: .venv
          key: venv-5  # increment to reset
      - run: |
          python -m venv .venv --upgrade-deps
          source .venv/bin/activate
          pip install pre-commit
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - uses: actions/cache@v3
        id: pre-commit-cache
        with:
          path: ~/.cache/pre-commit
          key: ${{ hashFiles('**/pre-commit-config.yaml') }}-4
      - run: |
          source .venv/bin/activate
          pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8.15", "3.9.15", "3.10.8", "3.11.0", "3.12.0-alpha.1" ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
      - uses: actions/cache@v3
        id: poetry-cache
        with:
          path: ~/.local
          key: key-14
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          version: latest
      - uses: actions/cache@v3
        id: cache-venv
        with:
          path: .venv
          key: ${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}-7
      - run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -U pip wheel
          poetry install --no-interaction --no-root
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - run: source .venv/bin/activate && poetry install
      - name: Run tests
        run: |
          pip install flake8==5
          pip install -e .
          flake8 .
          source .venv/bin/activate
          coverage run -m pytest tests
          coverage xml
          coverage report
      - uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.python-version == '3.10.7'
